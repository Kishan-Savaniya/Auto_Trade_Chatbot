---
globs: package.json,babel.config.*,.babelrc*
---

# Build and Development Workflow

## Build System

The project uses **Babel** for ES6 to CommonJS transpilation:

### Build Process
```bash
npm run build  # Compiles src/ to dist/ and copies .proto files
```

The build script in [package.json](mdc:package.json):
```json
"build": "babel src --out-dir dist && shx mkdir -p dist/feeder/proto/ && shx cp src/feeder/proto/*.proto dist/feeder/proto/"
```

### Key Points:
- **Source**: ES6 modules in [src/](mdc:src/)
- **Output**: CommonJS in [dist/](mdc:dist/) 
- **Entry Point**: [dist/index.js](mdc:dist/index.js) (specified in package.json main field)
- **Proto Files**: Copied to maintain WebSocket functionality

## Development Dependencies

### Babel Configuration
- `@babel/core`, `@babel/cli` - Core Babel functionality
- `@babel/preset-env` - Smart preset for target environments
- `@babel/register` - Runtime transpilation for tests
- Multiple proposal plugins for cutting-edge JS features

### Testing Stack
- **Mocha** - Test framework
- **expect.js** - Assertion library  
- **sinon** - Mocking and stubbing

### Utilities
- **shx** - Cross-platform shell commands
- **yalc** - Local package development and testing

## Development Scripts

```bash
npm run build              # Build for production
npm test                   # Run test suite
npm run dev-publish-local  # Publish to local yalc registry
npm run dev-push-local     # Push updates to yalc consumers
npm run dev-release        # Build + publish + push locally
```

## Local Development Workflow

For local SDK development and testing:
1. Make changes to [src/](mdc:src/) files
2. Run `npm run build` to compile
3. Use `npm run dev-release` to test in consuming applications
4. Run `npm test` to validate changes

## Version Management

- Version defined in [package.json](mdc:package.json) 
- SDK version headers automatically added to API requests
- Current version: 2.19.0

## Browser Compatibility

The SDK supports both Node.js and browser environments:
- **Node.js**: Full functionality including file system operations
- **Browser**: Limited functionality (fs module disabled via package.json browser field)

## Code Generation

**Important**: Core API and model files are auto-generated:
- Generated by Swagger Codegen v3.0.46
- Based on OpenAPI spec version v2
- Manual edits will be overwritten

## Dependencies

### Runtime Dependencies
- **axios** - HTTP client (v1.7.9)
- **superagent** - Alternative HTTP client (v5.3.0)  
- **ws** - WebSocket implementation (v8.16.0)
- **protobufjs** - Protocol buffer support (v7.2.6)
- **nanoid**, **uuid4** - ID generation
- **minimatch** - Pattern matching

### Development Notes
- Keep dependencies minimal for SDK distribution
- Prefer well-maintained, stable packages
- Consider bundle size impact for browser usage