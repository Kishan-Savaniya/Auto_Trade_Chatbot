---
globs: test/**/*.js
---

# Testing Patterns and Conventions

## Test Structure

Tests are organized to mirror the source structure:
- **[test/api/](mdc:test/api/)** - API endpoint tests (e.g., OrderApi.spec.js)
- **[test/model/](mdc:test/model/)** - Model validation tests  
- **[test/sdk/](mdc:test/sdk/)** - Integration and SDK usage examples

## Test Framework

The project uses **Mocha** as the test framework with the following setup:
- Configuration in [mocha.opts](mdc:mocha.opts)
- Babel register for ES6 support: `--require @babel/register`
- Recursive test discovery: `--recursive`

## Authentication in Tests

Tests require valid access tokens from [test/sdk/DataToken.js](mdc:test/sdk/DataToken.js):

```javascript
const { accessToken } = require('./DataToken');
let defaultClient = UpstoxClient.ApiClient.instance;
var OAUTH2 = defaultClient.authentications['OAUTH2'];
OAUTH2.accessToken = accessToken;
```

## Test Naming Convention

- API tests: `{ApiName}.spec.js` (e.g., OrderApi.spec.js, MarketQuoteApi.spec.js)
- Model tests: `{ModelName}.spec.js` 
- SDK examples: Descriptive names (e.g., PlaceOrder.js, MarketStreamer.js)

## Example Test Pattern

```javascript
let UpstoxClient = require('upstox-js-sdk');
const { accessToken } = require('./DataToken');

// Setup authentication
let defaultClient = UpstoxClient.ApiClient.instance;
var OAUTH2 = defaultClient.authentications['OAUTH2'];
OAUTH2.accessToken = accessToken;

// Create API instance
let apiInstance = new UpstoxClient.OrderApi();

// Test implementation
apiInstance.methodName(params, (error, data, response) => {
    if (error) {
        console.error(error.response.text);
    } else {
        console.log('API called successfully:', data);
    }
});
```

## Integration Tests

The [test/sdk/](mdc:test/sdk/) directory contains real integration examples:
- **[PlaceOrder.js](mdc:test/sdk/PlaceOrder.js)** - Order placement example
- **[MarketStreamer.js](mdc:test/sdk/MarketStreamer.js)** - WebSocket streaming example
- **[PortfolioStreamer.js](mdc:test/sdk/PortfolioStreamer.js)** - Portfolio updates example
- **[Sanity.js](mdc:test/sdk/Sanity.js)** - Basic connectivity test

## Running Tests

```bash
npm test                    # Run all tests
npm run test -- --grep "OrderApi"  # Run specific tests
```

## Test Data Requirements

- Valid access tokens are required for API tests
- Use sandbox mode for safe testing: `new UpstoxClient.ApiClient(true)`
- Test with valid instrument keys (e.g., "NSE_EQ|INE528G01035")

## Best Practices

1. **Always use sandbox mode** for destructive operations
2. **Mock external dependencies** when possible
3. **Test error scenarios** - Invalid tokens, malformed requests
4. **Validate response structures** - Ensure models match API responses
5. **Test WebSocket reconnection** scenarios