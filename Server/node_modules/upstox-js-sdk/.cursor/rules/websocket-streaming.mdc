---
globs: src/feeder/*.js,examples/websocket/**/*.js
---

# WebSocket Streaming Patterns

## Feeder Architecture

The SDK provides two main streaming classes:

### MarketDataStreamer (V2 & V3)
- **V2**: [MarketDataStreamer](mdc:src/feeder/MarketDataStreamer.js) - Legacy version
- **V3**: [MarketDataStreamerV3](mdc:src/feeder/MarketDataStreamerV3.js) - Recommended version

**Modes Available:**
- `ltpc`: Last trade price and closing price only
- `full`: Complete market data including depth and candlestick data  
- `full_d30`: Full mode plus 30 market level quotes (V3 only)
- `option_greeks`: Option Greeks data (V3 only)

### PortfolioDataStreamer
- [PortfolioDataStreamer](mdc:src/feeder/PortfolioDataStreamer.js) - Real-time order and portfolio updates
- Supports: order updates, position updates, holding updates, GTT updates

## Usage Pattern

```javascript
// Market Data Streaming
const streamer = new UpstoxClient.MarketDataStreamerV3(
    ["NSE_EQ|INE020B01018", "NSE_EQ|INE467B01029"], 
    "full"
);
streamer.connect();

streamer.on("message", (data) => {
    const feed = data.toString("utf-8");
    console.log(feed);
});

// Portfolio Data Streaming  
const portfolioStreamer = new UpstoxClient.PortfolioDataStreamer(
    true,  // orderUpdate
    true,  // positionUpdate  
    false, // holdingUpdate
    false  // gttUpdate
);
```

## Event Handling

All streamers emit these events:
- `open`: Connection established
- `close`: Connection closed
- `message`: Data received
- `error`: Error occurred
- `reconnecting`: Reconnection attempt
- `autoReconnectStopped`: Auto-reconnect exhausted

## Auto-Reconnect

```javascript
// Configure auto-reconnect
streamer.autoReconnect(
    true,  // enable
    10,    // interval in seconds
    3      // retry count
);
```

## Protocol Buffers

Market data uses Protocol Buffers for efficient data transmission:
- [MarketDataFeed.proto](mdc:src/feeder/proto/MarketDataFeed.proto) - V2 format
- [MarketDataFeedV3.proto](mdc:src/feeder/proto/MarketDataFeedV3.proto) - V3 format

## Subscription Management

```javascript
// Subscribe to instruments
streamer.subscribe(["NSE_EQ|INE020B01018"], "full");

// Change mode for existing subscriptions
streamer.changeMode(["NSE_EQ|INE020B01018"], "ltpc");

// Unsubscribe
streamer.unsubscribe(["NSE_EQ|INE020B01018"]);
```

## Best Practices

1. **Always use V3 APIs** for new implementations
2. **Handle reconnection** - Markets can be volatile, connections may drop
3. **Manage subscriptions** - Subscribe/unsubscribe based on user needs
4. **Parse protobuf data** properly for market feeds
5. **Use appropriate modes** - `ltpc` for basic needs, `full` for comprehensive data